---
  - name: Gather Facts to check if a similar instance is running
    ec2_instance_info:
      region: "{{ region }}"
      filters:
        instance-state-name: running
        "tag:Name": "testing"
    register: ec2_exists

  - name: Display Details
    debug: var=ec2_exists

  - name: Provision ec2 instances
    ec2:
      key_name: "{{ key_name }}"
      instance_type: "{{ instance_type }}"
      image: "{{ ami_id }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      # group: "{{ group }}"
      group_id: "{{ ec2_sg_id }}"
      region: "{{ region }}"
      instance_profile_name: "{{ instance_profile_name }}"
      exact_count: "{{ count }}"
      count_tag:
        Creator: "{{ creator }}"
        Name: "{{ tag_name }}"
      instance_tags:
        Creator: ansible
        Name: "{{ tag_name }}"
      user_data: |
             #!/bin/sh
             echo -e "ubuntu ALL=(ALL) NOPASSWD:ALL\n" >> /etc/sudoers.tmp
      volumes:
        - device_name: /dev/xvda
          volume_type: gp2
          volume_size: 8
          delete_on_termination: yes
      assign_public_ip: yes
    # delegate_to: 127.0.0.1
    register: ec2
    when: ec2_exists.instances | selectattr('state','equalto','running') | list | count == 0

  - name: Add the newly created host so that we can further contact it
    add_host:
      hostname: "{{ item.public_ip }}"
      groups: privateserver
    with_items: "{{ ec2.tagged_instances }}"

  - name: ssh-copy-id to ec2 servers
    # shell: sshpass -p password ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no ubuntu@"{{ item.public_dns_name }}"
    shell: cat ~/.ssh/id_rsa.pub | ssh ec2-user@"{{ item.public_dns_name }}" "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_ip }}"
      port: "{{ ansible_port }}"
      timeout: 300
      state: started
    with_items: "{{ ec2.instances }}"
